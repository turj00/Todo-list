{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/Header.js","components/AddTask.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","props","nameItem","completed","textDecoration","color","background","this","id","title","style","type","onChange","markComplete","bind","crossBtnStyle","onClick","deleteTask","Component","padding","float","borderRadius","border","cursor","Todos","name","map","n","key","headerStyle","textAlign","fontSize","linkStyle","Header","to","AddTask","state","addingTask","e","setState","target","value","onSubmit","preventDefault","addTodo","display","placeholder","flex","About","Fragment","App","todos","m","filter","todo","newTodo","Math","random","alert","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.019a7a38.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport class TodoItem extends Component {\r\n\r\n    getStyle = () => {\r\n\r\n        if(this.props.nameItem.completed){\r\n\r\n            return {\r\n \r\n                textDecoration: 'line-through',\r\n                color:'green',\r\n                background:'#E5DEDD'\r\n                \r\n \r\n             }\r\n         } else{\r\n \r\n             return {\r\n                 textDecoration: 'none',\r\n                 background: '#E5DEDD'\r\n\r\n             }\r\n \r\n         }\r\n\r\n       \r\n      \r\n\r\n\r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n\r\n        const { id, title  } = this.props.nameItem\r\n        return (\r\n            <div>\r\n                \r\n                <h1 style={ this.getStyle() } >\r\n\r\n                    <input type='checkbox' onChange= {this.props.markComplete.bind(this,id)}></input> \r\n                    \r\n                    \r\n                       { title } \r\n\r\n                      <button  style={crossBtnStyle} onClick={this.props.deleteTask.bind(this,id)}> X </button>\r\n\r\n                      \r\n                 \r\n                </h1>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n}\r\n\r\nconst crossBtnStyle= {\r\n\r\n    background: 'red',\r\n    color: 'white',\r\n    padding: '9px' ,\r\n    float: 'right',\r\n    borderRadius: '50%',\r\n    border: 'none',\r\n    cursor: 'pointer'\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default TodoItem\r\n","import React, { Component } from 'react'\r\nimport TodoItem from './TodoItem'\r\n\r\nexport class Todos extends Component {\r\n    render() {\r\n\r\n        //console.log(this.props.name)\r\n        return this.props.name.map( (n) => {\r\n\r\n        return  <TodoItem key = {n.id} nameItem= {n}  markComplete= {this.props.markComplete} deleteTask={this.props.deleteTask}/> //kono kisu pass korle e props hoy oi js file e like \"this.props.\" and that \"key\" is for console error remove\r\n\r\n\r\n        })\r\n\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default Todos\r\n","import React from 'react'\r\nimport {Link} from 'react-router-dom' \r\n//for about and home page trasition \r\n\r\nfunction Header() {\r\n    return (\r\n        <div>\r\n            <header style={headerStyle}>\r\n\r\n                <h1> ToDO List</h1>\r\n                <Link to=\"/\" style={linkStyle}>Home</Link> || <Link to=\"/about\" style= {linkStyle}>About</Link>\r\n\r\n\r\n            </header>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nconst headerStyle = {\r\n\r\n    background: 'black',\r\n    textAlign: 'center',\r\n    color: 'yellow',\r\n    padding: '5px',\r\n    borderRadius: '20px',\r\n    fontSize:\"20px\"\r\n\r\n\r\n}\r\n\r\n\r\nconst linkStyle = {\r\n\r\n    color:'white',\r\n    background:'purple',\r\n    fontSize:'25px',\r\n    \r\n    \r\n\r\n\r\n}\r\nexport default Header\r\n","import React, { Component } from 'react'\r\n\r\nexport class AddTask extends Component {\r\n\r\n    state = {\r\n\r\n        title: ''\r\n\r\n    }\r\n\r\n    addingTask = (e) => \r\n        this.setState({ title: e.target.value})\r\n\r\n    \r\n    \r\n    \r\n    \r\n\r\n    onSubmit = (e) =>{\r\n\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({ title: ''});\r\n    \r\n\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form style={{ display:'flex'}} onSubmit={this.onSubmit} >\r\n\r\n                    <input \r\n                           type='text' \r\n                           placeholder='Add Task' \r\n                           style={{flex: '8', padding: '9px', borderRadius:'10px'}}\r\n                           value= {this.state.title}\r\n                           onChange= {this.addingTask}\r\n                    >\r\n                    </input>\r\n                    \r\n                    <input type='submit' \r\n                           value='Add' \r\n                           style={{ flex:'1', color: 'white' , background: 'green', borderRadius: '20px',border:'none'}}\r\n                    >\r\n                    </input>\r\n\r\n\r\n                </form>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTask\r\n","import React from 'react'\r\n\r\nexport default function About() {\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <h1>About</h1>\r\n            <p><h2>This is a Todo app developed by turj00</h2></p>\r\n            <p>Version 0.0.0.1</p>\r\n            \r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\nimport {BrowserRouter as Router, Route } from 'react-router-dom'\nimport Todos from './components/Todos'\nimport Header from './components/Header'\nimport AddTask from './components/AddTask'\nimport About from './components/pages/About'\nexport class App extends Component {\n\n  state = {\n\n    todos: [\n\n      {\n\n        id: 1,\n        title: 'Eat Burger',\n        completed: false\n\n\n      },\n\n      {\n\n        id: 2,\n        title: 'Do Exercise',\n        completed: false\n\n\n      },\n\n      {\n\n        id: 3,\n        title: 'Eat Again',\n        completed: false\n\n\n      }\n\n\n    ]\n\n\n\n  }        \n\nmarkComplete = (id) => {\n\n    this.setState(\n      {\n        \n        todos: this.state.todos.map( m =>{\n\n            if(m.id === id){\n\n              m.completed = !m.completed //learn ! \n\n            }\n\n            return m // setState e return must\n\n        })\n\n\n\n\n    })\n\n\n}\n\n//delete task IMPORTANT!!! LEARN THIS!!!\n\ndeleteTask= (id) => {\n\n  this.setState({todos: [...this.state.todos.filter(todo =>todo.id !== id)]})\n\n // console.log(id)\n\n}\n\naddTodo = (title) =>{\n\n  if(title){\n\n    \n  \n  \n\n    const  newTodo = {\n\n      id: Math.random() ,\n      title: title,\n      completed: false\n\n    }\n  \n\n // console.log(title)\n  this.setState({ todos: [...this.state.todos, newTodo]})\n  }\n\n  else if(!title){\n\n    alert(\"oopps...Can't add empty field. Please type something\")\n  \n  }\n\n\n\n}\n  render() {\n    return (\n      <Router>\n        <div>\n          <Header/> \n          <Route exact path=\"/\" render={ props => (\n            //exact in route tag is needed so that about page doesnt show on main page when loads\n\n                <React.Fragment>\n\n              <AddTask addTodo={this.addTodo}/>\n              <Todos name={this.state.todos} markComplete= {this.markComplete} deleteTask={this.deleteTask}/>\n\n               </React.Fragment>\n\n\n          )} />\n\n            <Route path=\"/About\" component={About} />\n          \n        </div>\n      </Router>\n    )\n  }\n}\n\n\n\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}